<template>
  <div>
    <canvas id="game" width="1536" height="800" />
    <button @click="test">test</button>
  </div>
</template>

<script>
import { onMounted, useContext } from '@nuxtjs/composition-api'
import { ResourceManager } from '../api/resource'
import { Map } from '../api/map'
import { Screen } from '../api/screen'
import { Game } from '../api/game'
import { useFps } from '../api/game/plugins/gameFps'
export default {
  setup() {
    // game options
    const gameOptions = {
      pixel: { width: 64, height: 64 }
    }

    // resource
    const resourceManager = new ResourceManager()
    resourceManager.setOptions({ pixel: gameOptions.pixel })

    // my character init
    const myCharacterInit = async (map) =>  {
      resourceManager.add(
        "sprite",
        "char_cute_male",
        "characters/cute_male.png",
        {
          source: {
            width: 128,
            height: 128
          }
        }
      )
      await resourceManager.load()
      const data = {
        keysMap: [],
        move: 'right',
        idle: true,
        x: 0,
        y: 0
      }
      map.addObject('my_character', data, resourceManager.get('char_cute_male'))
    }
    let cycleChar = []
    let frameCycle = 0
    const speed = 5
    const myCharacterUpdate = (context) => {
      const { map, frame } = context
      const char = map.getObject('my_character')
      const charData = char.data
      // const velocity = 15

      //
      const keysMap = charData.keysMap

      // iddle
      if (keysMap.length === 0 || !keysMap.find(e => e === true)) {
        cycleChar = [0, 1]
      } else {
        let x = charData.x
        let y = charData.y
        const { width, height } = char.asset.getFinalSize(gameOptions.pixel)
        if (keysMap[68] === true) {
          // right
          cycleChar = [2, 3]
          x += speed
        } else if (keysMap[87] === true) {
          // up
          cycleChar = [2, 3]
          y -= speed
        } else if (keysMap[65] === true) {
          // left
          cycleChar = [4, 5]
          x -= speed
        } else if (keysMap[83] === true) {
          // bottom
          cycleChar = [8, 9]
          y += speed
        }
        const size = map.getFinalSize()
        if (x < 0) x = 0
        if (y < 0) y = 0
        if (x - width > size.width) x = size.width
        if (y - height > size.width) y = size.height
        char.setData({ x, y })
      }

      // apply cycle
      char.asset.scene = cycleChar[frameCycle]

      if (frame % 7 === 0) {
        if (frameCycle >= cycleChar.length-1) frameCycle = -1
        frameCycle++
      }
    }

    // game update logic
    const gameUpdate = (context) => {
      const { screen, map } = context

      // chars
      myCharacterUpdate(context)

      // clear
      screen.clear()

      // plugins
      useFps(context)

      // map
      map.draw(context)
    }

    const main = async () => {
      // map
      const map = new Map(useContext(), resourceManager, gameOptions.pixel)
      await map.loadFromHttp('maps/example_public_map.json')

      // chars
      await myCharacterInit(map)

      // game
      const canvas = document.querySelector('canvas#game')
      const screen = new Screen(canvas, map.getSize())
      const game = new Game(screen, map, gameUpdate)
      game.start()

      // focus
      screen.focus('my_character')

      // key bind control
      const keysMap = []
      document.addEventListener('keydown', (e) => {
        const character = map.getObject('my_character')
        keysMap[e.keyCode] = true
        character.setData({ keysMap })
      })
      document.addEventListener('keyup', (e) => {
        const character = map.getObject('my_character')
        keysMap[e.keyCode] = false
        character.setData({ keysMap })
      })
    }

    onMounted(async () => {
      await main()
    })

    return {
      test: () => {}
    }
  },
}
</script>
